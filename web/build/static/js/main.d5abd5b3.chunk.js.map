{"version":3,"sources":["components/SplitResult.js","react-auth0-spa.js","components/FeedForm.js","components/NavBar.js","components/Profile.js","components/BillsHistory.js","components/PrivateRoute.js","utils/history.js","App.js","serviceWorker.js","index.js"],"names":["SplitResult","props","username","splitResult","push","Modal","show","onHide","aria-labelledby","centered","autoFocus","keyboard","Header","closeButton","Title","id","Body","Table","striped","bordered","hover","size","Footer","Button","variant","onClick","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","children","onRedirectCallback","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","loginWithRedirect","getTokenSilently","getTokenWithPopup","logout","FeedForm","numberOfPeople","setNumberOfPeople","billAmount","setBillAmount","setUsername","notes","setNotes","setSplitResult","modalShow","setModalShow","_props","Form","onSubmit","event","preventDefault","nickname","formData","Number","isNaN","url","requestOptions","method","mode","referrerPolicy","headers","body","JSON","stringify","fetch","then","response","json","data","money","Row","Group","controlId","Label","Control","as","name","onChange","target","Text","className","type","rows","NavBar","Navbar","Brand","to","Toggle","aria-controls","Collapse","Nav","inline","Profile","Card","bg","text","Img","src","picture","alt","Subtitle","email","BillsHistory","tableData","setTableData","tableDataTemp","Array","isArray","length","handleSubmit","map","elem","index","key","PrivateRoute","Component","component","path","rest","targetUrl","fn","render","createBrowserHistory","App","exact","Boolean","hostname","match","ReactDOM","domain","config","client_id","clientId","redirect_uri","origin","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d5abd5b3.chunk.js","sourcesContent":["import React from 'react';\nimport { Modal, Button, Table } from 'react-bootstrap';\n\n\nconst SplitResult = (props) => {\n    let tableData = [];\n    if (props.username && props.splitResult) {\n        tableData.push({\n            username: props.username,\n            splitResult: props.splitResult\n        });\n    }\n    return (\n        <>\n            <Modal show={props.show} onHide={props.onHide} aria-labelledby=\"contained-modal-title-vcenter\" centered autoFocus keyboard>\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                        Results\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Result of your splitted bill\n                    <Table striped bordered hover size=\"sm\">\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Username</th>\n                                <th>Amount</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{1}</td>\n                                <td>{props.username}</td>\n                                <td>$ {props.splitResult}</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"danger\" onClick={props.onHide}>\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\n\nexport default SplitResult;","// src/react-auth0-spa.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n    window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n    children,\n    onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n    ...initOptions\n}) => {\n    const [isAuthenticated, setIsAuthenticated] = useState();\n    const [user, setUser] = useState();\n    const [auth0Client, setAuth0] = useState();\n    const [loading, setLoading] = useState(true);\n    const [popupOpen, setPopupOpen] = useState(false);\n\n    useEffect(() => {\n        const initAuth0 = async () => {\n            const auth0FromHook = await createAuth0Client(initOptions);\n            setAuth0(auth0FromHook);\n\n            if (window.location.search.includes(\"code=\") &&\n                window.location.search.includes(\"state=\")) {\n                const { appState } = await auth0FromHook.handleRedirectCallback();\n                onRedirectCallback(appState);\n            }\n\n            const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n            setIsAuthenticated(isAuthenticated);\n\n            if (isAuthenticated) {\n                const user = await auth0FromHook.getUser();\n                setUser(user);\n            }\n\n            setLoading(false);\n        };\n        initAuth0();\n        // eslint-disable-next-line\n    }, []);\n\n    const loginWithPopup = async (params = {}) => {\n        setPopupOpen(true);\n        try {\n            await auth0Client.loginWithPopup(params);\n        } catch (error) {\n            console.error(error);\n        } finally {\n            setPopupOpen(false);\n        }\n        const user = await auth0Client.getUser();\n        setUser(user);\n        setIsAuthenticated(true);\n    };\n\n    const handleRedirectCallback = async () => {\n        setLoading(true);\n        await auth0Client.handleRedirectCallback();\n        const user = await auth0Client.getUser();\n        setLoading(false);\n        setIsAuthenticated(true);\n        setUser(user);\n    };\n    return (\n        <Auth0Context.Provider\n            value={{\n                isAuthenticated,\n                user,\n                loading,\n                popupOpen,\n                loginWithPopup,\n                handleRedirectCallback,\n                getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n                loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n                getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n                getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n                logout: (...p) => auth0Client.logout(...p)\n            }}\n        >\n            {children}\n        </Auth0Context.Provider>\n    );\n};","import React, { useState, useEffect } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport SplitResult from \"./SplitResult\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\n\nconst FeedForm = () => {\n    const [numberOfPeople, setNumberOfPeople] = useState(0);\n    const [billAmount, setBillAmount] = useState(0);\n    const [username, setUsername] = useState('Unregistered');\n    const [notes, setNotes] = useState('');\n    const [splitResult, setSplitResult] = useState(0);\n    const [modalShow, setModalShow] = useState(false);\n    const { loading, user } = useAuth0();\n    let _props = {\n        action: 'http://44.227.190.37:8080/api/',\n        method: 'POST',\n        mode: 'cors'\n    }\n\n    useEffect(() => {\n        // document.title = `Welcome, ${username}!`;\n    });\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        if (!loading && user) {\n            setUsername(user.nickname);\n        }\n        let formData = {\n            numberOfPeople: Number(numberOfPeople),\n            billAmount: !isNaN(Number(billAmount)) ? Number(billAmount) : 0,\n            username: user && user.nickname ? user && user.nickname : username,\n            notes: notes\n        };\n        let url = _props.action;\n        let method = _props.method;\n        let mode = _props.mode;\n        const requestOptions = {\n            method: method,\n            mode: mode,\n            referrerPolicy: 'origin-when-cross-origin',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n            },\n            body: JSON.stringify(formData)\n        };\n        fetch(url, requestOptions).then(response => response.json()).then(data => {\n            setSplitResult(!isNaN(data.money) ? data.money : 0);\n            setModalShow(true);\n        });\n    };\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Row>\n                <Form.Group controlId=\"feedForm.numberOfPeople\">\n                    <Form.Label>Number of people</Form.Label>\n                    <Form.Control as=\"select\" value={numberOfPeople} name=\"numberOfPeople\" onChange={event => setNumberOfPeople(event.target.value)}>\n                        <option>Choose...</option>\n                        <option>1</option>\n                        <option>2</option>\n                        <option>3</option>\n                        <option>4</option>\n                        <option>5</option>\n                        <option>6</option>\n                        <option>7</option>\n                        <option>8</option>\n                        <option>9</option>\n                    </Form.Control>\n                    <Form.Text className=\"text-muted\">\n                        Please select the quantity of people.\n                    </Form.Text>\n                </Form.Group>\n            </Form.Row>\n            <Form.Row>\n                <Form.Group controlId=\"feedForm.billAmount\">\n                    <Form.Label>Bill amount</Form.Label>\n                    <Form.Control name=\"billAmount\" type=\"number\" value={billAmount} onChange={event => setBillAmount(event.target.value)} />\n                </Form.Group>\n            </Form.Row>\n            <Form.Row>\n                <Form.Group controlId=\"feedForm.notes\">\n                    <Form.Label>Notes</Form.Label>\n                    <Form.Control as=\"textarea\" rows=\"3\" name=\"notes\" value={notes} onChange={event => setNotes(event.target.value)} />\n                </Form.Group>\n            </Form.Row>\n            <Button variant=\"success\" type=\"submit\">\n                Submit\n            </Button>\n            <SplitResult show={modalShow} onHide={() => setModalShow(false)} username={username} splitResult={splitResult} />\n        </Form>\n    );\n};\n\n\nexport default FeedForm;","import React from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Button, Nav, Form } from 'react-bootstrap';\n\nconst NavBar = () => {\n    const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n    return (\n        <div>\n            {!isAuthenticated && (\n                <Navbar variant=\"money\">\n                    <Navbar.Brand>\n                        <Link className=\"link\" to=\"/\">Bills Cutter</Link>&nbsp;\n                    </Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            {/* <Link className=\"link\" to=\"/profile\">Profile</Link> */}\n                        </Nav>\n                    </Navbar.Collapse>\n                    <Form inline className=\"justify-content-end\">\n                        <Button variant=\"outline-light\" onClick={() => loginWithRedirect({})}>Log in</Button>\n                    </Form>\n                </Navbar>\n            )}\n\n            {isAuthenticated && (\n                <Navbar variant=\"money\">\n                    <Navbar.Brand>\n                        <Link className=\"link\" to=\"/\">Bills Cutter</Link>&nbsp;\n                    </Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                            <Link className=\"nav-link link\" to=\"/profile\">Profile</Link>\n                            <Link className=\"nav-link link\" to=\"/history\">History</Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                    <Form inline className=\"justify-content-end\">\n                        <Button variant=\"outline-light\" onClick={() => logout()}> Log out </Button>\n                    </Form>\n                </Navbar>\n            )}\n        </div>\n    );\n};\n\nexport default NavBar;","import React, { Fragment } from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport { Card } from 'react-bootstrap';\n\nconst Profile = () => {\n    const { loading, user } = useAuth0();\n\n    if (loading || !user) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <Fragment>\n            <Card bg=\"light\" text=\"success\" className=\"profile-card\">\n                <Card.Header as=\"h5\">Welcome!</Card.Header>\n                <Card.Img variant=\"top\" src={user.picture} alt=\"Profile\" />\n                <Card.Body>\n                    <Card.Title>{user.name}</Card.Title>\n                    <Card.Subtitle className=\"mb-2 text-muted\">{user.email}</Card.Subtitle>\n                    <Card.Text>\n                        {/* <code>{JSON.stringify(user, null, 2)}</code> */}\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        </Fragment>\n    );\n};\n\nexport default Profile;","import React, { Fragment, useState, useEffect } from \"react\";\nimport { Table } from 'react-bootstrap';\n\n\nconst BillsHistory = () => {\n    const [tableData, setTableData] = useState([]);\n    let _props = {\n        action: 'http://44.227.190.37:8080/history/',\n        method: 'POST',\n        mode: 'cors'\n    }\n    const handleSubmit = () => {\n        let formData = {};\n        let url = _props.action;\n        let method = _props.method;\n        let mode = _props.mode;\n        const requestOptions = {\n            method: method,\n            mode: mode,\n            referrerPolicy: 'origin-when-cross-origin',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n            },\n            body: JSON.stringify(formData)\n        };\n        fetch(url, requestOptions).then(response => response.json()).then(data => {\n            let tableDataTemp = Array.isArray(data) && data.length > 0 ? data : [];\n            setTableData(tableDataTemp);\n        });\n    };\n\n    useEffect(() => {\n        handleSubmit();\n    }, []);\n\n    return (\n        <Fragment>\n            <Table striped bordered hover size=\"sm\">\n                <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>People</th>\n                        <th>Bill Amount</th>\n                        <th>Username</th>\n                        <th>Notes</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tableData.length > 0 && tableData.map((elem, index) => {\n                        return (\n                            <tr key={elem.id}>\n                                <td>{elem.id}</td>\n                                <td>{elem.numberOfPeople}</td>\n                                <td>$ {elem.billAmount}</td>\n                                <td>{elem.username}</td>\n                                <td>{elem.notes}</td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </Table>\n        </Fragment>\n    );\n};\n\n\nexport default BillsHistory;","import React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\n    const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\n\n    useEffect(() => {\n        if (loading || isAuthenticated) {\n            return;\n        }\n        const fn = async () => {\n            await loginWithRedirect({\n                appState: { targetUrl: window.location.pathname }\n            });\n        };\n        fn();\n    }, [loading, isAuthenticated, loginWithRedirect, path]);\n\n    const render = props =>\n        isAuthenticated === true ? <Component {...props} /> : null;\n\n    return <Route path={path} render={render} {...rest} />;\n};\n\nexport default PrivateRoute;","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import React from \"react\";\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport FeedForm from './components/FeedForm.js';\nimport NavBar from \"./components/NavBar\";\nimport Profile from \"./components/Profile\";\nimport BillsHistory from \"./components/BillsHistory\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport history from \"./utils/history\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst App = () => {\n    document.title = 'Bills Cutter';\n\n    return (\n        <div className=\"App\">\n            <Router history={history}>\n                <header>\n                    <NavBar />\n                </header>\n                <Switch>\n                    <Route path=\"/\" exact>\n                        <div id=\"App-content\" className=\"App-content\">\n                            <FeedForm name=\"feedForm\" />\n                        </div>\n                    </Route>\n                    <PrivateRoute path=\"/profile\" component={Profile} />\n                    <PrivateRoute path=\"/history\" component={BillsHistory} />\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./utils/history\";\n\nconst onRedirectCallback = appState => {\n    history.push(\n        appState && appState.targetUrl ? appState.targetUrl : window.location.pathname\n    );\n};\n\nReactDOM.render(\n    <Auth0Provider\n        domain={config.domain}\n        client_id={config.clientId}\n        redirect_uri={window.location.origin}\n        onRedirectCallback={onRedirectCallback}\n    >\n        <App />\n    </Auth0Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}